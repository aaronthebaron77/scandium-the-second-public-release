doctype html

html
    head
        style(type="text/css").
            * {
                font-family: Arial, Helvetica, sans-serif;
            }

            html {
                overflow: hidden;
            }

            .error-container {
                position: fixed;
                top: 15px;
                margin: 0 auto;
            }

            .error {
                margin-top: 10px;
                padding: 20px;
                background-color: #f44336;
                color: white;
            }

            .errorclose {
                margin-left: 15px;
                color: white;
                font-weight: bold;
                float: right;
                font-size: 22px;
                line-height: 20px;
                cursor: pointer;
                transition: 0.3s;
            }

            .errorclose:hover {
                color: black;
            }

            #container {
                top: 5px;
                display: flex;
                flex-direction: column;
                width: 95vw;
            }

            #input {
                position: relative;
                display: inline-block;
            }

            #input .tooltiptext {
                visibility: hidden;
                border: 2px solid black;
                background: white;
                color: black;
                white-space: nowrap;
                width: auto;
                text-align: left;
                border-radius: 6px;
                padding: 5px;
                padding-left: 2px;
                max-height: 500px;
                overflow-y: scroll;

                /* Position the tooltip */
                position: absolute;
                z-index: 1;
                bottom: 100%;
                left: 5%;
                margin-left: -60px;
            }

            #input .tooltiptext ul li:hover {
                background-color: gray;
            }

            /* #input:hover .tooltiptext {
                visibility: visible;
            } */

            #input_messages {
                resize: none;
                width: 95vw; 
                max-height: 600px;
            }

            #container h1 {
                max-height: 5vh;
            }

            #container h3 {
                max-height: 3vh;
            }

            #messages {
                max-height: 70vh;
                overflow-y: auto;
                overflow-wrap: break-word;
            }

            .message {
                padding: 3px;
            }

            .message:hover {
                background-color: lightgray;
            }

            .d-mention {
                color: rgba(7, 104, 201, 0.79);
                background-color: rgba(63, 127, 191, 0.54);
                border-radius: 3px;
                padding: 2px;
            }

            .d-mention:hover {
                text-decoration: underline;
            }

            .d-image-embed, .d-video-embed, .d-audio-embed {
                max-width: 100%;
                height: auto;
            }

            .d-emoji, .d-emoji-animated {
               max-width: 5vw;
               height: auto; 
            }

            .d-emoji-container:hover .tooltiptext {
                  visibility: visible;
            }

            .d-emoji-container {
                position: relative;
                display: inline-block;
            }

            .d-emoji-container .tooltiptext {
                  visibility: hidden;
                  border: 2px solid black;
                  background: white;
                  color: black;
                  white-space: nowrap;
                  width: auto;
                  text-align: center;
                  border-radius: 6px;
                  padding: 5px;
  
                  /* Position the tooltip */
                  position: absolute;
                  z-index: 1;
                  bottom: 100%;
                  left: 70%;
                  margin-left: -60px;
            }

            .d-reply-container:hover .tooltiptext {
                  visibility: visible;
            }

            .d-reply-container {
                position: relative;
                display: inline-block;
            }

            .d-reply-container .tooltiptext {
                  visibility: hidden;
                  border: 2px solid black;
                  background: white;
                  color: black;
                  white-space: nowrap;
                  width: auto;
                  text-align: left;
                  border-radius: 6px;
                  padding: 5px;
  
                  /* Position the tooltip */
                  position: absolute;
                  z-index: 1;
                  bottom: 100%;
                  left: 50%;
                  margin-left: -60px;
            }

            .d-embed {
                padding: 5px;
                background-color: grey;
                color: white;
            }

            .d-embed hr {
                border: 1px solid #2B2D2F;
            }

            /*.d-embed-thumbnail {
                max-height: 80px;
                height: auto;
            }*/

            code {
                font-family: consolas, monospace; !important
            }

        link(rel="icon" href="favicon.ico" type="image/x-icon")
        link(rel="shortcut icon" href="favicon.ico" type="image/x-icon")

        title Scandium 2

        script(src="/socket.io/socket.io.js")
        link(rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css")
        script(src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js")
    body
        div(class="error-container")
        div(id="container")
            h1 #{welcome}
            
            div
                strong Channel: 
                select(id='channelselect')
                    each c in channels
                        option(value=c[1]) #{c[0]}

            br
            
            div(id="messages")

        div(id="input")
            textarea(id="input_messages" onkeyup="handleMessageSending(event)" placeholder="Add to the discussion!")
            span(class="tooltiptext")
        script.
            const socket = io();
            const channelinput = document.querySelector("#channelselect");
            const messageinput = document.querySelector("#input_messages");
            const userID = "#{userID}";
            const serverID = "#{server}";

            var e = document.createElement("div"); 
            e.innerHTML = "#{emojis}";
            const emojis = JSON.parse(e.innerText);

            var u = document.createElement("div"); 
            u.innerHTML = "#{users}";
            const users = JSON.parse(u.innerText);

            var r = document.createElement("div"); 
            r.innerHTML = "#{roles}";
            const roles = JSON.parse(r.innerText);

            e.remove(); u.remove(); r.remove();
            console.log(emojis, users);

            const messagediv = document.querySelector("#messages");

            var requestDebounce = false;
            var channelEnd = false;
            var replying = false;
            var editing = false;

            window.addEventListener('resize', () => {
                try {
                    if (window.innerHeight < 800) {
                        document.querySelector("body > div > h1").style.display = "none";
                        document.querySelector("body > div > div > h3").style.display = "none";
                    } else {
                        document.querySelector("body > div > h1").style.display = "inline";
                        document.querySelector("body > div > div > h3").style.display = "inline";
                    }
                } catch(e) {};
            });

            function readjustSizeOfMessageBox() {
                try {
                    messageinput.style.width = "0";
                    messageinput.style.height = "0";

                    messageinput.style.width = "95vw";
                    messageinput.style.height = messageinput.scrollHeight + 'px';

                    // messagediv.style.height = window.innerHeight - messageinput.scrollHeight - 150 + 'px';
                } catch(e) {console.log(e)};
            }

            function handleMessageSending(event) {
                try {
                    if (event.keyCode === 13 && !event.shiftKey && (messageinput.value && !messageinput.value.match(/^ *$/))) {
                        if(!(replying || editing)) {
                            socket.emit("client_message", messageinput.value);
                            messageinput.value = '';
                        } else if (replying) {
                            socket.emit("reply_message", { messageID: replying, data: messageinput.value });
                            messageinput.value = '';
                        } else if (editing) {
                            socket.emit("edit_message", { messageID: editing, data: messageinput.value });
                            messageinput.value = '';
                        }
                    } else {
                        // Autocomplete
                        var lastWord = messageinput.value.trim().split(" ").pop().toLowerCase();
                        
                        if (lastWord.charAt(0) === ":") {
                            var matchingEmojis = emojis.filter(e => e.name.toLowerCase().startsWith(lastWord));
                            //- console.log(matchingEmojis)

                            if (matchingEmojis.length > 0) {
                                var suggestions = document.createElement("ul");

                                var emojisHeader = document.createElement("em");
                                emojisHeader.innerText = "Emojis:";
                                emojisHeader.style.color = "purple";

                                suggestions.appendChild(emojisHeader);

                                for (var e of matchingEmojis) {
                                    var li = document.createElement('li');
                                    li.textContent = e.name + "  ";
                                    li.id = e.string;
                                    li.style.userSelect = "none";

                                    var image = document.createElement("img");
                                    image.src = e.url;
                                    image.style.verticalAlign = "middle";
                                    image.style.maxWidth = "50px";
                                    li.appendChild(image);

                                    li.addEventListener("click", e_1 => {
                                        var lastWord2 = messageinput.value.trim().split(" ").pop();
                                        if(lastWord2.charAt(0) === ":") messageinput.value = messageinput.value.replace(lastWord2, '');

                                        messageinput.value += e_1.target.id;
                                    });

                                    suggestions.appendChild(li);
                                }

                                document.querySelector("#input > .tooltiptext").innerHTML = '';
                                document.querySelector("#input > .tooltiptext").appendChild(suggestions);
                                document.querySelector("#input > .tooltiptext").style.visibility = "visible";
                            } else {
                                document.querySelector("#input > .tooltiptext").style.visibility = "hidden";
                                document.querySelector("#input > .tooltiptext").innerHTML = '';
                            }
                        } else if (lastWord.charAt(0) === "@") {
                            var matchingUsers = users.filter(u => `@${u.name}`.toLowerCase().startsWith(lastWord) || `@${u.displayname}`.startsWith(lastWord));
                            var matchingRoles = roles.filter(r => `@${r.name}`.toLowerCase().startsWith(lastWord));
                            //- console.log(matchingUsers)

                            if (matchingUsers.length > 0 || matchingRoles.length > 0) {
                                var suggestions = document.createElement("ul");

                                var usersHeader = document.createElement("em");
                                usersHeader.innerText = "Users:";
                                usersHeader.style.color = "purple";

                                var rolesHeader = document.createElement("em");
                                rolesHeader.innerText = "Roles:";
                                rolesHeader.style.color = "purple";

                                suggestions.appendChild(usersHeader);

                                for (var u of matchingUsers) {
                                    var li = document.createElement('li');
                                    li.textContent = u.displayname;
                                    li.id = u.string;
                                    li.style.userSelect = "none";

                                    li.addEventListener("click", e => {
                                        var lastWord2 = messageinput.value.trim().split(" ").pop();
                                        if(lastWord2.charAt(0) === "@") messageinput.value = messageinput.value.replace(lastWord2, '');

                                        messageinput.value += e.target.id;
                                    });

                                    suggestions.appendChild(li);
                                }

                                suggestions.appendChild(document.createElement("br"));

                                suggestions.appendChild(rolesHeader);

                                for (var r of matchingRoles) {
                                    var li = document.createElement('li');
                                    li.textContent = r.name;
                                    li.id = r.string;
                                    li.style.userSelect = "none";

                                    li.addEventListener("click", e => {
                                        var lastWord2 = messageinput.value.trim().split(" ").pop();
                                        if(lastWord2.charAt(0) === "@") messageinput.value = messageinput.value.replace(lastWord2, '');

                                        messageinput.value += e.target.id;
                                    });

                                    suggestions.appendChild(li);
                                }

                                document.querySelector("#input > .tooltiptext").innerHTML = '';
                                document.querySelector("#input > .tooltiptext").appendChild(suggestions);
                                document.querySelector("#input > .tooltiptext").style.visibility = "visible";
                            } else {
                                document.querySelector("#input > .tooltiptext").style.visibility = "hidden";
                                document.querySelector("#input > .tooltiptext").innerHTML = '';
                            }
                        } else if (lastWord.charAt(0) === "#") {
                            var matchingChannels = Array.prototype.filter.call(channelinput.children, ({ textContent }) => `#${textContent}`.toLowerCase().startsWith(lastWord));
                            //- console.log(matchingChannels);

                            if(matchingChannels.length > 0) {
                                var suggestions = document.createElement("ul");

                                var channelsHeader = document.createElement("em");
                                channelsHeader.innerText = "Channels:";
                                channelsHeader.style.color = "purple";

                                suggestions.appendChild(channelsHeader);

                                for (var c of matchingChannels) {
                                    var li = document.createElement('li');
                                    li.textContent = c.textContent;
                                    li.id = `<#${c.value}>`;
                                    li.style.userSelect = "none";

                                    li.addEventListener("click", e => {
                                        var lastWord2 = messageinput.value.trim().split(" ").pop();
                                        if(lastWord2.charAt(0) === "#") messageinput.value = messageinput.value.replace(lastWord2, '');

                                        messageinput.value += e.target.id;
                                    });

                                    suggestions.appendChild(li);
                                }

                                document.querySelector("#input > .tooltiptext").innerHTML = '';
                                document.querySelector("#input > .tooltiptext").appendChild(suggestions);
                                document.querySelector("#input > .tooltiptext").style.visibility = "visible";
                            } else {
                                document.querySelector("#input > .tooltiptext").style.visibility = "hidden";
                                document.querySelector("#input > .tooltiptext").innerHTML = '';
                            }
                        } else {
                            document.querySelector("#input > .tooltiptext").style.visibility = "hidden";
                            document.querySelector("#input > .tooltiptext").innerHTML = '';
                        }
                    }
                } catch(e) {console.log(e)};
            }

            messageinput.addEventListener('input', () => {
                readjustSizeOfMessageBox();
            });

            messageinput.addEventListener('blur', (e) => {
                readjustSizeOfMessageBox();
                handleMessageSending(e);
            });

            channelinput.addEventListener('change', () => {
                messagediv.innerHTML = '';

                requestDebounce = true;
                channelEnd = false;

                socket.emit('request_channel_data', {channelID: channelinput.value, before: null});
                var loading = document.createElement('em');
                loading.innerText = "Loading messages. . .";
                loading.style.color = "purple";
                messagediv.appendChild(loading);
            });

            function isInViewport(element) {
                try {
                    var rect = element.getBoundingClientRect();
                    var viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
                    return !(rect.bottom < 0 || rect.top - viewHeight >= 0);
                } catch(e) {console.log(e)}
            }

            function createAttachments(m_a) {
                var attachments = document.createElement('div');
                m_a.forEach(a => {
                    const type = a.url.split('/')[0];
                    // console.log(type);
                    switch (type) {
                        case "data:image":
                            var image = document.createElement('img');
                            image.classList.add(`d-image-embed`);
                            image.src = a.url;
                            image.alt = `Epic embed fail.`;
                            attachments.appendChild(image);
                            break;
                        case "data:video":
                            var video = document.createElement('video');
                            video.classList.add(`d-video-embed`);
                            video.src = a.url;
                            video.controls = true;
                            attachments.appendChild(video);
                            break;
                        case "data:audio":
                            var audio = document.createElement('audio');
                            audio.classList.add(`d-audio-embed`);
                            audio.src = a.url;
                            audio.controls = true;
                            attachments.appendChild(audio);
                            break;
                        default:
                            var file = document.createElement('button');
                            file.innerText = `FILE: ${a.name}`;
                            file.onclick = () => {
                                console.log(a.url)
                                if(a.url.includes("application")) {
                                    
                                } else {
                                    var newTab = window.open();
                                    newTab.document.write('<iframe src="' + a.url  + '" frameborder="0" style="border:0; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%;" allowfullscreen></iframe>');
                                }
                            }
                            attachments.appendChild(file);
                            break;
                    }
                });
                attachments.classList.add("d-attachments");
                return attachments;
            }

            function createEmbed(e) {
                // console.log(e);
                var embed = document.createElement('div');
                embed.style.borderLeft = `thick solid ${e.color}`;

                if (e.thumbnail && !(e.image || e.video || e.yt_video)) {
                    var thumbnail = document.createElement('img');
                    thumbnail.classList.add(`d-embed-thumbnail`);
                    thumbnail.src = e.thumbnail;
                    thumbnail.alt = `Epic embed fail.`;
                    embed.appendChild(thumbnail);
                }

                var title = document.createElement('h2');
                title.innerHTML = e.title;

                var description = document.createElement('p');
                description.innerHTML = e.description;

                embed.appendChild(title);
                embed.appendChild(description);

                e.fields.forEach(f => {
                    var name = document.createElement('p');
                    name.innerHTML = f.name;

                    var value = document.createElement('p');
                    value.innerHTML = f.value;

                    embed.appendChild(document.createElement('hr'));
                    embed.appendChild(name);
                    embed.appendChild(value);
                });
                if (e.fields.length > 0) embed.appendChild(document.createElement('hr'));

                embed.appendChild(createAttachments(e.files));
                
                if (e.image) {
                    var image = document.createElement('img');
                    image.classList.add(`d-image-embed`);
                    image.src = e.image;
                    image.alt = `Epic embed fail.`;
                    embed.appendChild(image);
                }

                if (e.video) {
                    var video = document.createElement('video');
                    video.classList.add(`d-video-embed`);
                    video.src = e.video;
                    video.controls = true;
                    embed.appendChild(video);
                }

                if (e.yt_video) {
                    var video = document.createElement('iframe');
                    video.classList.add(`d-yt-embed`);
                    video.src = e.yt_video;
                    video.frameborder = "0";
                    video.allowfullscreen = true;
                    embed.appendChild(video);
                }

                var footer = document.createElement('small');
                footer.innerHTML = e.footer;
                embed.appendChild(footer);

                embed.classList.add("d-embed");

                //console.log(embed);
                return embed;
            }

            function createMessage(m) {
                var messageObject = JSON.parse(m);

                var message = document.createElement('div');
                var content = document.createElement('div');
                content.innerHTML = messageObject.text;

                var name = document.createElement('strong');
                name.innerText = messageObject.author;
                name.style = `color: ${messageObject.color};`;

                var time = document.createElement('strong');
                const options = { year: "numeric", month: "long", day: "numeric" }
                var day = new Date(messageObject.sentAt).toLocaleDateString(undefined, options);
                var hms = new Date(messageObject.sentAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                
                var reply = document.createElement('span');
                var replyText = document.createElement('strong');
                replyText.innerText = ", replying to ";
                reply.appendChild(replyText);
                var replyMessage = document.createElement('span');
                replyMessage.classList.add('d-reply-container');
                replyMessage.id = messageObject.id;
                replyMessage.innerHTML = "<em style='color:purple'>message</em>";

                replyMessage.addEventListener("mouseover", function( event ) {
                    socket.emit("fetch_reply_JSON", {id: messageObject.reference, messageID: messageObject.id});
                }, {once: true}, false);

                var replyTooltip = document.createElement('span');
                replyTooltip.classList.add('tooltiptext');
                replyTooltip.innerHTML = "<em style='color:purple'>Loading. . .</em>";
                replyMessage.appendChild(replyTooltip);
                reply.appendChild(replyMessage);

                if (new Date(messageObject.sentAt).getDate() === new Date().getDate() &&
                    new Date(messageObject.sentAt).getMonth() === new Date().getMonth() &&
                    new Date(messageObject.sentAt).getFullYear() === new Date().getFullYear()) {
                    time.innerText = ' at ' + hms;
                } else {
                    time.innerText = ' on ' + day;
                }

                var attachments = createAttachments(messageObject.attachments);

                message.appendChild(name);
                message.appendChild(time);

                var edited = document.createElement("small");
                edited.innerText = "(edited)";
                if (messageObject.edited) message.appendChild(edited);

                if (messageObject.reference) message.appendChild(reply);

                var messageactions = document.createElement("div");
                messageactions.style.display = "inline-block";
                messageactions.style.marginLeft = "3px";

                var del = document.createElement("button");
                del.innerText = "Delete";
                var reply = document.createElement("button");
                reply.innerText = "Reply";
                var edit = document.createElement("button");
                edit.innerText = "Edit";

                reply.addEventListener("click", e => {
                    if (!replying && !editing) {
                        replying = e.target.parentNode.parentNode.id;
                        e.target.innerText = "Cancel";
                    } else if (e.target.parentNode.parentNode.id === replying) {
                        replying = false;
                        e.target.innerText = "Reply";
                    }
                });

                edit.addEventListener("click", e => {
                    if (!replying && !editing) {
                        editing = e.target.parentNode.parentNode.id;
                        e.target.innerText = "Cancel";
                    } else if (e.target.parentNode.parentNode.id === editing) {
                        editing = false;
                        e.target.innerText = "Edit";
                    }
                });

                del.addEventListener("click", e => {
                    socket.emit("delete_message", e.target.parentNode.parentNode.id);
                });

                messageactions.appendChild(del);
                messageactions.appendChild(reply);
                messageactions.appendChild(edit);

                messageactions.classList.add("message-actions");

                message.appendChild(messageactions);

                message.appendChild(content);
                message.appendChild(attachments);
                messageObject.embeds.forEach(e => {
                   message.appendChild(createEmbed(e)); 
                });
                message.appendChild(document.createElement('p'));
                message.classList.add('message');
                message.id = messageObject.id;

                return message;
            }

            function addMessage(m, prepend = true) {
                var message = createMessage(m);
                var atBottom = isInViewport(messagediv.lastChild);

                prepend ? messagediv.prepend(message) : messagediv.append(message);

                if (!prepend && atBottom) {
                    messagediv.lastChild.scrollIntoView(false, {behavior: "smooth"});
                }
            }

            socket.once('connect', function() {
                socket.emit('join', {userID: userID, serverID: serverID, channelID: channelinput.value});
            });

            socket.once('connection_success', function() {
                socket.emit('request_channel_data', {channelID: channelinput.value, before: null});

                var loading = document.createElement('em');
                loading.innerText = "Loading messages. . .";
                loading.style.color = "purple";
                messagediv.appendChild(loading);
            });

            socket.on("channel_history", data => {
                // console.log(data);

                if (document.querySelector("#messages > em")) document.querySelector("#messages > em").remove();

                data.forEach(m => {
                    // console.log(JSON.parse(m));
                    addMessage(m);
                });

                if (messagediv.childNodes.length === 10) messagediv.scrollTop = messagediv.scrollHeight - messagediv.clientHeight;
                else if (messagediv.childNodes.length >= 10) messagediv.children.item(10).scrollIntoView(true);

                requestDebounce = false;
                if (data.length < 10) endOfChannel();
                else if (messagediv.clientHeight <= messagediv.scrollHeight) loadMessages();
            });
            
            messagediv.addEventListener('scroll', () => {
                loadMessages();
            });

            function loadMessages() {
                if (isInViewport(messagediv.firstChild) && !requestDebounce && !channelEnd) {
                    requestDebounce = true;
                    socket.emit('request_channel_data', {channelID: channelinput.value, before: messagediv.firstChild.id});
                    var loading = document.createElement('em');
                    loading.innerText = "Loading messages. . .";
                    loading.style.color = "purple";
                    messagediv.prepend(loading);
                    console.log("Loading more messages");
                } /*else if (!isInViewport(messagediv.firstChild)) console.log("bug detected")*/

                const mentions = document.querySelectorAll('.d-mention');
                Array.from(mentions).forEach((m, index) => {
                    // if(!isInViewport(m)) return;

                    var user = /^<@!?([0-9]*)>/.exec(m.innerText);
                    var channel = /^<#([0-9]*)>/.exec(m.innerText);
                    var role = /^<@&([0-9]*)>/.exec(m.innerText);

                    if(user) {
                        socket.emit('fetch_mention_data', {type: 'user', id: user[1]});
                    } else if(channel) {
                        socket.emit('fetch_mention_data', {type: 'channel', id: channel[1]});
                    } if(role) {
                        socket.emit('fetch_mention_data', {type: 'role', id: role[1]});
                    }
                });
            }

            function endOfChannel() {
                console.log("End of channel");
                if (document.querySelector("#messages > em")) document.querySelector("#messages > em").remove();
                channelEnd = true;
                var notice = document.createElement('em');
                notice.style.color = "purple";
                notice.innerText = "This is the start of the channel!";
                messagediv.prepend(notice);
            }

            socket.on("mention_data", (data) => {
                // console.log(data);

                const mentions = document.querySelectorAll('.d-mention');
                const mentions_filtered = Array.from(mentions).filter(m => m.id === data.id);

                // console.log(mentions_filtered);
                mentions_filtered.forEach(m => m.innerText = data.data);
            });

            socket.on("reply_JSON", (data) => {
                const replies = document.querySelectorAll('.d-reply-container');
                const replies_filtered = Array.from(replies).filter(r => r.id === data.messageID);

                replies_filtered.forEach(r => {
                    var tooltip = r.querySelector("span");

                    if (!tooltip) return;

                    tooltip.innerHTML = '';

                    var message = createMessage(data.JSON);

                    tooltip.appendChild(message);
                });
            });

            socket.on("new_message", (data) => {
                // console.log(data);
                addMessage(data, false);
            });

            socket.on("message_edit", data => {
                // console.log(data);
                var oldMessage = document.getElementById(data.id);
                if(!oldMessage) return;

                if (editing === data.id) {
                    editing = false;
                    // oldMessage.querySelector(".message-actions > button:nth-child(3)").innerText = "Edit";
                }

                var newMessage = createMessage(data.message);

                oldMessage.parentNode.replaceChild(newMessage, oldMessage);
            });

            socket.on("message_delete", id => {
                var message = document.getElementById(id);
                if(!message) return;

                message.remove();
            });

            socket.on("reply_success", mid => {
                replying = false;
                var message = document.getElementById(mid);
                if(!message) return;

                console.log(message)

                message.querySelector(".message-actions > button:nth-child(2)").innerText = "Reply";
            });

            function displayError(m) {
                var error = document.createElement("div");
                var close = document.createElement("span");

                error.appendChild(close);
                error.innerHTML = `<strong>${m}</strong>`;

                error.classList.add("error");
                close.classList.add("errorclose");

                close.innerText = "×";

                close.addEventListener("click", e => {
                    e.target.parentNode.remove();
                });

                error.appendChild(close);

                document.querySelector("body > .error-container").appendChild(error);
            }

            
            socket.on("disconnect", () => {
                displayError("WebSocket is disconnected. As a result, you cannot send or recieve messages. Please refresh the page to reconnect.")
            });

            // displayError("hi")

            socket.on("error", m => {
                displayError(m);
            });

            window.addEventListener('error', (event) => {
                displayError(event.message);
            });